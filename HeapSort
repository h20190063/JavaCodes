public class HeapSort {

	public static void inplaceHeapSort(int input[]) {
        buildHeap(input);
        heapSort(input);
	}
    
    private static void buildHeap(int input[]){
        for(int i = 0; i < input.length; i++){
            upHeapify(input, i);
        }
    }
    
    private static void upHeapify(int[] input, int index){
        while(index > 0){
            int parentIndex = (index - 1) / 2;
            
            if(input[index] < input[parentIndex]){
                swap(input, index, parentIndex);
                index = parentIndex;
            }else return;
        }
    }
    
    private static void swap(int[] input, int i, int j){
        int temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }
    
    private static void heapSort(int[] minHeap){
        
        int size = minHeap.length;
        while(size > 0){
            swap(minHeap, 0, size-1);
            size--;
            downHeapify(minHeap, size);
        }
    }
    
    private static void downHeapify(int[] minHeap, int size){
		    int index = 0, leftChild = 1, rightChild = 2, minIndex = index;
        
        while(leftChild < size){
            if(minHeap[leftChild] < minHeap[minIndex])	minIndex = leftChild;
            if(rightChild < size && minHeap[rightChild] < minHeap[minIndex])	minIndex = rightChild;
            
            if(minIndex == index) return;
            
            swap(minHeap, index, minIndex);
            index = minIndex;
            leftChild = index * 2 + 1;
            rightChild = leftChild + 1;
        }
    }
    
}
